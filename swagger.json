{
  "openapi": "3.0.0",
  "info": {
    "title": "API Documentation",
    "version": "1.0.0",
    "description": "For Airbnb Management Platform"
  },
  "servers": [
    {
      "url": "http://ec2-51-20-4-233.eu-north-1.compute.amazonaws.com:8000/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User management routes"
    },
    {
      "name": "Admin",
      "description": "Admin-related routes"
    },
    {
      "name": "General",
      "description": "Other general routes"
    }
  ],
  "paths": {
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout User and Blacklist Token for Security Purposes",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/change-pass": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "AUTHENTICATED Owner OR Admin can Change Password",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_pass": {
                    "example": "any"
                  },
                  "new_pass": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "AUTHENTICATED Owner OR Admin to Update its Details by ID from JWT Token.",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updates": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "AUTHENTICATED Owner OR Admin to get its Details by ID from JWT Token.",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/booked-dates/filter": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Filtered Dates for a Property by start_date and property ID provided through query",
        "description": "Retrieved documents may contain unnecessary fields.",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "property",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/payment-details/": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "AUTHENTICATED Owner or Admin can set Payment Details by passing ID through JWT Token",
        "description": "> TODO: Created document is sent back that may be unnecessary.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/PaymentDetailsRequest"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Payment Details by passing user ID through JWT Token",
        "description": "> TODO: Retrieved details are sent back that may contain unnecessary information.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/payment-details/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Payment Details by passing ID through params or query and user ID through JWT Token",
        "description": "> TODO: Updated document is sent back that may be unnecessary.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/UpdatesRequest"
              }
            }
          }
        }
      }
    },
    "/users/properties": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get All Properties by User ID through JWT Token",
        "description": "Retrieved documents may contain unnecessary fields.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/properties/all": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get All Properties by User ID through JWT Token",
        "description": "Retrieved documents may contain unnecessary fields.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/properties/block-owner/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Set Block Owner Stay for Property",
        "description": "User can set block owner stay for their property.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/property-utilities/": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Set Property Utility for a Property by User",
        "description": "Created document may contain unnecessary fields.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/PropertyUtilityRequest"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Property Utility for a Property",
        "description": "Retrieved document may contain unnecessary fields.",
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/property-utilities/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Property Utility for a Property by property ID through query or params",
        "description": "Retrieved document may contain unnecessary fields.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/UpdatesRequest"
              }
            }
          }
        }
      }
    },
    "/users/utilities/": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "AUTHENTICATED Owner OR Admin can create Property Utility for a Property by providing Property ID",
        "description": "Created document may contain unnecessary fields.",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/UtilityManagementRequest"
              }
            }
          }
        }
      }
    },
    "/users/utilities": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/utilities/{id}": {
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updates": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/providers/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get All Service Providers List from the Database Collection",
        "description": "Retrieved documents may contain unnecessary fields.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/upload/single": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Upload Single File",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schema/UploadSingleFile"
              }
            }
          }
        }
      }
    },
    "/users/upload/multiple": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Upload Multiple Files",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schema/UploadMultipleFiles"
              }
            }
          }
        }
      }
    },
    "/users/user-documents/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Documents by passing property ID through query or params and user ID through JWT Token",
        "description": "> TODO: Retrieved documents are sent back that may contain unnecessary information.",
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "AUTHENTICATED Owner or Admin can set User Document by passing ID through JWT Token",
        "description": "> TODO: Created document is sent back that may be unnecessary.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/UserDocumentsRequest"
              }
            }
          }
        }
      }
    },
    "/users/user-documents/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Documents by passing ID through params or query and user ID through JWT Token",
        "description": "> TODO: Updated document is sent back that may be unnecessary.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/UpdatesRequest"
              }
            }
          }
        }
      }
    },
    "/admin/signup": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin can create login credentials for Property Owner by sending details and AUTHORIZED BEARER TOKEN in header. On creation, password string will be shared to admin and Property Owner through Emails.",
        "description": "",
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin can view the list of users by passing AUTHORIZED BEARER TOKEN in header and query parameters - startDate, endDate, status, searchTerm, role, city, page, and limit",
        "description": "",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/users/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin can update the user details by passing AUTHORIZED BEARER TOKEN in header and user ID in path",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin can view the details of the user passing its ID inside path and AUTHORIZED BEARER TOKEN in header.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin can disable the user, by passing the AUTHORIZED BEARER TOKEN in header and user ID in path, from utilizing the property management platform.",
        "description": "> #TODO: Response might be unnecessarily long",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/amenities/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add new amenities to the list",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmenitiesRequest"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can retrieve all amenities from the list",
        "description": "> #TODO: Retrieved documents are being sent back through response that may contain unnecessary information",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/amenities/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete non-required amenity by passing ID within path",
        "description": "> #TODO: Deleted document is being sent back through response that may contain unnecessary information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update existing amenities by passing ID within path",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmenitiesRequest"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can retrieve amenity by passing ID within path",
        "description": "> #TODO: Retrieved document is being sent back through response that may contain unnecessary information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/blog-categories/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add new blog category",
        "description": "> #TODO: Created documents is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogCategoryRequest"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can view all blog categories available",
        "description": "> #TODO: Retrieved documents are being sent back through response that may contain unnecessary information",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/blogs/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add new blogs to the website",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/booked-dates/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update dates booked (from frontend) by sending the document ID within path",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookedDatesRequest"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete any reservation by passing ID within path",
        "description": "> #TODO: Deleted document is being sent back through response that may contain unnecessary information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/book-details/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can get specific booking details by ID of the booking",
        "description": "> #TODO: Retrieved document is being sent back through response that may contain unnecessary information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/contact-us/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add company contact information",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/contact-us/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update contact information by sending the document ID within path",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/airbnb-dubai/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add the content for AIRBNB DUBAI page",
        "description": "> #TODO: Created document is being sent from reponse that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirbnbDubaiRequest"
              }
            }
          }
        }
      }
    },
    "/admin/estimate-revenue/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can setup the estimated revenue for different areas and beds.",
        "description": "> #TODO: NEEDS TO WORK ON ENDPOINT AS PER CALCULATIONS AND REQUIREMENTS.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "area_name": {
                    "example": "any"
                  },
                  "base_price": {
                    "example": "any"
                  },
                  "beds": {
                    "example": "any"
                  },
                  "furnishing": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/faqs/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add new FAQs",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaqsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/faqs/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete any non-required FAQs by specifying ID within params",
        "description": "> #TODO: Deleted document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update existing FAQs by specifying ID within params",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaqsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/gallery-types/": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can fetch all gallery types.",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add any new gallary type by specifying the NAME of gallary type.",
        "description": "> #TODO: Created document is being sent from reponse that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GallaryTypeRequest"
              }
            }
          }
        }
      }
    },
    "/admin/gallery-types/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete any non-required gallary type by specifying the ID of gallary type in path.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/gallery/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add property images, while creating properties, in gallery collections.",
        "description": "> #TODO: Created document is being sent from reponse that may be unnecessary",
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GallaryRequest"
              }
            }
          }
        }
      }
    },
    "/admin/gallery/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can overwrite the gallary type by specifying the gallery document using id from path.",
        "description": "> #TODO: Updated document is being sent from reponse that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "objectid of gallery type"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete a gallery document using the ID from the path.",
        "description": "> Deletes a gallery document by ID and returns the deleted document for reference.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ObjectID of the gallery document to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/home-content/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add Home Content to be retrieved on Home page on frontend",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomeContentRequest"
              }
            }
          }
        }
      }
    },
    "/admin/home-content/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update Home Content to be retrieved on Home page on frontend",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary, and requestBody is not well-structured",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomeContentRequest"
              }
            }
          }
        }
      }
    },
    "/admin/content/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add or update Legals for Terms & Conditions/Privacy Policy/Refund Policy on frontend",
        "description": "> Updates the document if the type exists, otherwise creates a new one.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegalsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/maintenance/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add maintenance bills for specific property",
        "description": "> #TODO: Created document is being sent from reponse that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRequest"
              }
            }
          }
        }
      }
    },
    "/admin/featured-articles/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add Featured Articles",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturedArticlesRequest"
              }
            }
          }
        }
      }
    },
    "/admin/bank-details/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can fetch the bank details of specific user using the ID passed in params",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update the bank details of specific user using the ID passed in params and the updated fields as an object - updates - in request body",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatesRequest"
              }
            }
          }
        }
      }
    },
    "/admin/pricing/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add Pricing to be retrieved on Pricings Page on frontend",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PricingsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/pricing/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update Pricing to be retrieved on Pricings Page on frontend by specifying ID witin params.",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatesRequest"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete Pricing by specifying ID within request parameters",
        "description": "> #TODO: Deleted document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/properties/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add new property",
        "description": "> Handles property creation and associated gallery updates.",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertiesRequest"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can view the list of properties with a LIMIT of properties on each PAGE",
        "description": "> Each document of properties may contain unnecessary data that may not be required on the admin panel.",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/properties/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete any non-required property by specifying the ID within params",
        "description": "> #TODO: Deleted document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update any non-required property by specifying the ID within params",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatesRequest"
              }
            }
          }
        }
      }
    },
    "/admin/properties/{user}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can view properties of any selected user by specifying id of the user as USER within params",
        "description": "> #TODO: Each document of properties list may have unnecessary data being sent back to client",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/requirements/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add Requirements to be retrieved on Requirements Page on frontend",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/providers/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can set or manage the list of providers for different services - electricity, internet, gas, chiller, etc.",
        "description": "> #TODO: On successful creation, no data is being sent from reponse",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvidersRequest"
              }
            }
          }
        }
      }
    },
    "/admin/services/add-service": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add any new Service to be retrieved on Services Dropdown tab in Navbar on frontend",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicesRequest"
              }
            }
          }
        }
      }
    },
    "/admin/subscriptions/": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can see the list of subscriptions or subscribers",
        "description": "> #TODO: Revise the response to selectively send required keys",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/subscriptions/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can delete subscriptions or subscribers",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/testimonials/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add testimonials to be retrieved on frontend",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestimonialsRequest"
              }
            }
          }
        }
      }
    },
    "/admin/third-party-logos/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add third party information to be retrieved on frontend",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThirdPartyLogosRequest"
              }
            }
          }
        }
      }
    },
    "/admin/third-party-logos/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can update third party information by sending the document ID within path",
        "description": "> #TODO: Updated document is being sent back through response that may be unnecessary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatesRequest"
              }
            }
          }
        }
      }
    },
    "/admin/utility/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can set or manage the applicable taxes",
        "description": "> #TODO: Creatde Object is being sent back, may or may not be needed",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxUtilityRequest"
              }
            }
          }
        }
      }
    },
    "/admin/guides/": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "AUTHORIZED Admin can add Videos media as guides to be retrieved on MEDIA page on frontend",
        "description": "> #TODO: Created document is being sent back through response that may be unnecessary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGuidesRequest"
              }
            }
          }
        }
      }
    },
    "/admin/dashboard": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admin/generate-pdf": {
      "post": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/ui-content/": {
      "post": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "example": "any"
                  },
                  "body": {
                    "example": "any"
                  },
                  "images": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/statements": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Add a new statement",
        "description": "> #TODO: Implement validation for input fields",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatementRequest"
              }
            }
          }
        }
      }
    },
    "/admin/monthly-invoice": {
      "post": {
        "description": "",
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/monthly-invoice-revenue": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "property_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target_month",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Login User",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "example": "any"
                  },
                  "password": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/forgot-pass": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Send OTP to User's Email",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/OTPRequest"
              }
            }
          }
        }
      }
    },
    "/verify-otp": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Verify OTP for User",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/VerifyOTPRequest"
              }
            }
          }
        }
      }
    },
    "/reset-pass": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Reset User's Password",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schema/ResetPasswordRequest"
              }
            }
          }
        }
      }
    },
    "/blogs/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all blogs with pagination and sorting by date added in descending order",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/blogs/{id}": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get a single blog by id with related blogs in the same category",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/book-details/": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Save booking details to the database",
        "description": "> #TODO: Created document is being sent back through response that may contain unnecessary information",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookDetailsRequest"
              }
            }
          }
        }
      }
    },
    "/booked-dates/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all booked dates for a property",
        "description": "> #TODO: Retrieved documents are being sent back through response that may contain unnecessary information",
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Set booked dates or reserve dates for a property",
        "description": "> #TODO: Created document is being sent back through response that may contain unnecessary information",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookedDatesRequest"
              }
            }
          }
        }
      }
    },
    "/contact-us/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Endpoint to get company contact details to map on website",
        "description": "> #TODO: Retrieved contact details of the company may contain non-required information.",
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/contact-us/query": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Endpoint to send contact query to the company. This will send an email to the company and an acknowledgment email to the user.",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullname": {
                    "example": "any"
                  },
                  "email": {
                    "example": "any"
                  },
                  "phone": {
                    "example": "any"
                  },
                  "subject": {
                    "example": "any"
                  },
                  "message": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/airbnb-dubai/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Endpoint to get Airbnb Dubai details to map on website",
        "description": "> #TODO: Retrieved documents may contain non-required information.",
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/estimate-revenue/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Endpoint to get areas & bedrooms to map on website",
        "description": "",
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/estimate-revenue/{id}": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Endpoint to get estimated revenue for a given area and bedroom",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beds",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "furnishing_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/faqs/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get filtered FAQs based on page",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/gallery-types/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all gallary types for mapping on website's UI - Gallary Page",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/gallery": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get gallery images with pagination - Gallery Page",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/home-content/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get Home Content for the home page of the website",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/content": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all legals, Terms & Conditions, Privacy Policy, and Refund Policy, for mapping on website's UI",
        "description": "",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/featured-articles/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all featured articles with third party information populated",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/pricing/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all pricings for mapping on website's UI - Pricings Page",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/properties/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all properties with images and details populated along with other selected fields - Properties Page",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/properties/all": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/properties/{id}": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get a single property with images and details populated - Property Page",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/requirements/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all requirements for mapping on website's UI - Requirements Page",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/services/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all services for mapping on website's UI - Services Dropdown on Navbar",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/subscriptions/": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Set Subscription for Newsletter",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/testimonials/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all testimonials for mapping on website's UI - Testimonials carousel on Home Page",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/third-party-logos/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all third party logos for mapping on website's UI - Component",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/guides/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get all video guides for mapping on website's UI - Videos Page",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ui-content/": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "LimitParameter": {
        "in": "query",
        "name": "limit",
        "required": false,
        "type": "number",
        "description": "Number of users per page"
      },
      "PageParameter": {
        "in": "query",
        "name": "page",
        "required": false,
        "type": "number",
        "description": "Page number for pagination"
      },
      "IdParameter": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Unique identifier for the resource"
        },
        "description": "The ID of the resource to retrieve or modify"
      },
      "UserParameter": {
        "in": "path",
        "name": "user",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Unique identifier for the resource"
        },
        "description": "The ID of the resource to retrieve or modify"
      },
      "PropertyParameter": {
        "in": "query",
        "name": "property",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Unique ObjectId for collection Property"
        },
        "description": "The ID of the property to retrieve or modify"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "amansekhon.mexxiss@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "OTPRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "amansekhon.mexxiss@gmail.com"
          }
        }
      },
      "VerifyOTPRequest": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string",
            "example": "123456"
          },
          "email": {
            "type": "string",
            "example": "amansekhon.mexxiss@gmail.com"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "amansekhon.mexxiss@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "new_password"
          }
        }
      },
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "array",
            "example": [
              "john.doe@example.com",
              "abc@xyz.com"
            ],
            "items": {
              "type": "string"
            }
          },
          "phone": {
            "type": "array",
            "example": [
              "+919876543210"
            ],
            "items": {
              "type": "string"
            }
          },
          "role": {
            "type": "string",
            "example": "Owner"
          },
          "address": {
            "type": "object",
            "properties": {
              "building_no": {
                "type": "string",
                "example": "123"
              },
              "city": {
                "type": "string",
                "example": "Springfield"
              },
              "street": {
                "type": "string",
                "example": "Main Street"
              },
              "area": {
                "type": "string",
                "example": "Downtown"
              },
              "landmark": {
                "type": "string",
                "example": "Near City Mall"
              },
              "country": {
                "type": "string",
                "example": "Dubai"
              },
              "pincode": {
                "type": "string",
                "example": "123456"
              }
            }
          }
        }
      },
      "UserDocumentsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "document_title"
          },
          "expiry_date": {
            "type": "string",
            "example": "document_expiry_date"
          },
          "note": {
            "type": "string",
            "example": "document_note"
          },
          "document": {
            "type": "string",
            "example": "cloudinary_document_url"
          },
          "property": {
            "type": "string",
            "example": "object_id_of_property"
          }
        }
      },
      "PaymentDetailsRequest": {
        "type": "object",
        "properties": {
          "accountHolderName": {
            "type": "string",
            "example": "account_holder_name"
          },
          "accountNumber": {
            "type": "string",
            "example": "account_number"
          },
          "bankName": {
            "type": "string",
            "example": "bank_name"
          },
          "swiftCode": {
            "type": "string",
            "example": "swift_code"
          },
          "iban": {
            "type": "string",
            "example": "iban"
          },
          "paymentMethod": {
            "type": "string",
            "example": "payment_method"
          },
          "currency": {
            "type": "string",
            "example": "AED"
          },
          "address": {
            "type": "object",
            "properties": {
              "building_no": {
                "type": "string",
                "example": "bank_building_no"
              },
              "city": {
                "type": "string",
                "example": "bank_city"
              },
              "street": {
                "type": "string",
                "example": "bank_street"
              },
              "area": {
                "type": "string",
                "example": "bank_area"
              },
              "landmark": {
                "type": "string",
                "example": "bank_landmark"
              },
              "country": {
                "type": "string",
                "example": "bank_country"
              },
              "pincode": {
                "type": "string",
                "example": "bank_pincode"
              }
            }
          }
        }
      },
      "UpdatesRequest": {
        "type": "object",
        "properties": {
          "updates": {
            "type": "object",
            "properties": {
              "abc_updated_key": {
                "type": "string",
                "example": "xyz_updated_value"
              }
            }
          }
        }
      },
      "TaxUtilityRequest": {
        "type": "object",
        "properties": {
          "vat_tax_rate": {
            "type": "number",
            "example": 5
          },
          "tourism_tax_rate": {
            "type": "number",
            "example": 6
          }
        }
      },
      "MaintenanceRequest": {
        "type": "object",
        "properties": {
          "issue": {
            "type": "string",
            "example": "date_of_issue"
          },
          "status": {
            "type": "string",
            "example": "Pending/In Progress/Resolved"
          },
          "cost": {
            "type": "number",
            "example": 1234.5
          },
          "property": {
            "type": "string",
            "example": "object_id of property being maintained"
          }
        }
      },
      "GallaryRequest": {
        "type": "object",
        "properties": {
          "img_url": {
            "type": "string",
            "example": "cloudinary image url"
          },
          "type": {
            "type": "string",
            "example": "gallary_type_object_id"
          },
          "property": {
            "type": "string",
            "example": "properties_object_id"
          }
        }
      },
      "ProvidersRequest": {
        "type": "object",
        "properties": {
          "internet": {
            "type": "object",
            "properties": {
              "service_providers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "service_provider_name"
                    }
                  }
                }
              }
            }
          },
          "electricity_water": {
            "type": "object",
            "properties": {
              "service_providers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "service_provider_name"
                    }
                  }
                }
              }
            }
          },
          "gas": {
            "type": "object",
            "properties": {
              "service_providers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "service_provider_name"
                    }
                  }
                }
              }
            }
          },
          "chiller": {
            "type": "object",
            "properties": {
              "service_providers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "service_provider_name"
                    }
                  }
                }
              }
            }
          },
          "other": {
            "type": "object",
            "properties": {
              "service_providers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "service_provider_name"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AirbnbDubaiRequest": {
        "type": "object",
        "properties": {
          "section1": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "section1_title"
              },
              "body": {
                "type": "string",
                "example": "section1_body"
              }
            }
          },
          "section2": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "section2_title"
              },
              "body": {
                "type": "string",
                "example": "section2_body"
              },
              "image": {
                "type": "string",
                "example": "section2_image_url"
              },
              "text_direction": {
                "type": "string",
                "example": "left/right/center"
              }
            }
          },
          "section3": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "section3_title"
              },
              "points": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "section3_point_title"
                    },
                    "body": {
                      "type": "string",
                      "example": "section3_point_body"
                    }
                  }
                }
              }
            }
          },
          "section4": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "section4_title"
              },
              "body": {
                "type": "string",
                "example": "section4_html_body"
              },
              "image": {
                "type": "string",
                "example": "section4_image_url"
              },
              "text_direction": {
                "type": "string",
                "example": "left/right/center"
              }
            }
          },
          "section5": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "section5_title"
              },
              "images": {
                "type": "array",
                "example": [
                  "section5_images_url"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PropertiesRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "title_of_property"
          },
          "description": {
            "type": "string",
            "example": "description_of_property"
          },
          "property_images": {
            "type": "array",
            "example": [
              "objectIds_from_gallery_collection"
            ],
            "items": {
              "type": "string"
            }
          },
          "property_details": {
            "type": "object",
            "properties": {
              "max_guest_count": {
                "type": "number",
                "example": 3
              },
              "rooms_count": {
                "type": "number",
                "example": 3
              },
              "beds_count": {
                "type": "number",
                "example": 3
              },
              "bathrooms_count": {
                "type": "number",
                "example": 1
              },
              "furnishing": {
                "type": "string",
                "example": "Premium/Standard"
              },
              "wifi": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "property_wifi_name"
                  },
                  "password": {
                    "type": "string",
                    "example": "property_wifi_password"
                  }
                }
              },
              "permit": {
                "type": "object",
                "properties": {
                  "permit_code": {
                    "type": "string",
                    "example": "property_permit_code"
                  },
                  "permit_expiry_date": {
                    "type": "string",
                    "example": "property_permit_expiry_date"
                  }
                }
              },
              "parking_no": {
                "type": "string",
                "example": "property_parking_no"
              }
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "building_no": {
                "type": "string",
                "example": "property_building_no"
              },
              "city": {
                "type": "string",
                "example": "property_city"
              },
              "street": {
                "type": "string",
                "example": "address_street"
              },
              "area": {
                "type": "string",
                "example": "address_area"
              },
              "landmark": {
                "type": "string",
                "example": "address_nearby_landmark"
              },
              "pincode": {
                "type": "string",
                "example": "address_pincode"
              },
              "country": {
                "type": "string",
                "example": "address_country"
              }
            }
          },
          "discounts_percentage": {
            "type": "object",
            "properties": {
              "weekly": {
                "type": "number",
                "example": 5
              },
              "monthly": {
                "type": "number",
                "example": 20
              }
            }
          },
          "costs": {
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "example": "AED"
              },
              "security_details": {
                "type": "string",
                "example": "The damage deposit will be taken at arrival and returned 7-14 days after chekout, subject to a damage inspection of the property."
              },
              "prices": {
                "type": "object",
                "properties": {
                  "security_amount": {
                    "type": "number",
                    "example": 2000
                  },
                  "price_per_night": {
                    "type": "number",
                    "example": 1000
                  },
                  "cleaning_fee": {
                    "type": "number",
                    "example": 330
                  }
                }
              }
            }
          },
          "property_check_details": {
            "type": "object",
            "properties": {
              "check_in": {
                "type": "string",
                "example": "15:00"
              },
              "check_out": {
                "type": "string",
                "example": "11:00"
              }
            }
          },
          "staying_rules": {
            "type": "string",
            "example": "staying_rules_in_html"
          },
          "cancellation_policy": {
            "type": "string",
            "example": "You can cancel the reservation free of charge until 14 days before arrival. The total reservation price will be charged if you cancel within 14 days of arrival."
          },
          "amenities": {
            "type": "array",
            "example": [
              "objectIds_from_amenities_collection"
            ],
            "items": {
              "type": "string"
            }
          },
          "important_information": {
            "type": "string",
            "example": "important_information_about_property_in_html"
          },
          "user": {
            "type": "string",
            "example": "objectId_of_property_owner_from_user_collection"
          },
          "status": {
            "type": "string",
            "example": "Active/Inactive"
          }
        }
      },
      "FaqsRequest": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "example": "faq_question"
          },
          "answer": {
            "type": "string",
            "example": "faq_answer"
          },
          "page": {
            "type": "array",
            "example": [
              "page_route_mapping_value"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FeaturedArticlesRequest": {
        "type": "object",
        "properties": {
          "third_party": {
            "type": "string",
            "example": "ObjectId to Third Party Logos"
          },
          "headline": {
            "type": "string",
            "example": "headline_of_featured_article"
          },
          "added_on": {
            "type": "string",
            "example": "date_when_featured"
          },
          "link": {
            "type": "string",
            "example": "link_to_featured_articleS"
          }
        }
      },
      "VideoGuidesRequest": {
        "type": "object",
        "properties": {
          "video_url": {
            "type": "string",
            "example": "cloudinary_url_of_video"
          },
          "title": {
            "type": "string",
            "example": "Title_of_Video_Guide"
          },
          "thumbnail": {
            "type": "string",
            "example": "thumbnail_image_for_video"
          }
        }
      },
      "HomeContentRequest": {
        "type": "object",
        "properties": {
          "banner_images": {
            "type": "array",
            "example": [
              "image_urls_for_home_banners"
            ],
            "items": {
              "type": "string"
            }
          },
          "what_people_says": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "title_for_section_what_people_says"
              },
              "description": {
                "type": "string",
                "example": "description_for_section_what_people_says"
              },
              "facts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "icon": {
                      "type": "string",
                      "example": "cloudinary_icon_url"
                    },
                    "title": {
                      "type": "string",
                      "example": "fact_title"
                    },
                    "description": {
                      "type": "string",
                      "example": "fact_description"
                    }
                  }
                }
              }
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "icon": {
                  "type": "string",
                  "example": "cloudinary_icon_url"
                },
                "title": {
                  "type": "string",
                  "example": "features_title"
                },
                "description": {
                  "type": "string",
                  "example": "features_description"
                }
              }
            }
          },
          "cleaning_maintenance": {
            "type": "object",
            "properties": {
              "what_inclued": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "title_text"
                    },
                    "description": {
                      "type": "string",
                      "example": "description_text"
                    }
                  }
                }
              }
            }
          },
          "interior_design_page": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "example": "description_for_interior_design_page"
              },
              "what_inclued": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "title_text"
                    },
                    "description": {
                      "type": "string",
                      "example": "description_text"
                    },
                    "others": {
                      "type": "array",
                      "example": [
                        "other_points"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "listing_management": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "title_for_listing_management"
              },
              "description": {
                "type": "string",
                "example": "description_for_listing_management"
              },
              "what_inclued": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "title_text"
                    },
                    "description": {
                      "type": "string",
                      "example": "description_text"
                    }
                  }
                }
              }
            }
          },
          "management_support": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "title_for_management_support"
              },
              "description": {
                "type": "string",
                "example": "description_for_management_support"
              },
              "bottom_content": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "title_text"
                    },
                    "description": {
                      "type": "string",
                      "example": "description_text"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LegalsRequest": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "example": "html_body_for_legals"
          },
          "title": {
            "type": "string",
            "example": "Terms & Conditions/Privacy Policy/Refund Policy"
          }
        }
      },
      "PricingsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "pricing_title - On-Boarding"
          },
          "description": {
            "type": "string",
            "example": "pricing_description"
          },
          "figures": {
            "type": "string",
            "example": "pricing_figures - Free/17%"
          },
          "icon": {
            "type": "string",
            "example": "pricing_cloudinary_icon_url"
          },
          "offers": {
            "type": "array",
            "example": [
              "pricing_plan_offers"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RequirementsRequest": {
        "type": "object",
        "properties": {
          "head": {
            "type": "string",
            "example": "requirement_head"
          },
          "points": {
            "type": "array",
            "example": [
              "requirement_points"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ServicesRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "service_name"
          }
        }
      },
      "TestimonialsRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "testimonial_comment"
          },
          "name": {
            "type": "string",
            "example": "testimonial_name"
          },
          "designation": {
            "type": "string",
            "example": "testimonial_designation"
          }
        }
      },
      "ThirdPartyLogosRequest": {
        "type": "object",
        "properties": {
          "logo": {
            "type": "string",
            "example": "cloudinary_logo_url"
          },
          "name": {
            "type": "string",
            "example": "logo_brand_name"
          },
          "type": {
            "type": "string",
            "example": "trusted/listed"
          }
        }
      },
      "AmenitiesRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "amenity_name"
          },
          "icon": {
            "type": "string",
            "example": "amenity_cloudinary_icon_url"
          }
        }
      },
      "GallaryTypeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "gallary_type_name"
          }
        }
      },
      "ContactUsRequest": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "example": [
              "company_contact_email"
            ],
            "items": {
              "type": "string"
            }
          },
          "phones": {
            "type": "array",
            "example": [
              "company_contact_phone"
            ],
            "items": {
              "type": "string"
            }
          },
          "location": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "example": "company_contact_address"
              },
              "city": {
                "type": "string",
                "example": "company_contact_city"
              },
              "country": {
                "type": "string",
                "example": "company_contact_country"
              },
              "pincode": {
                "type": "string",
                "example": "company_contact_pincode"
              },
              "state": {
                "type": "string",
                "example": "company_contact_state"
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "lat": {
                      "type": "number",
                      "example": 123.456
                    },
                    "long": {
                      "type": "number",
                      "example": 123.456
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BookedDatesRequest": {
        "type": "object",
        "properties": {
          "checkin_date": {
            "type": "string",
            "example": "checkin_date"
          },
          "checkout_date": {
            "type": "string",
            "example": "checkout_date"
          },
          "property": {
            "type": "string",
            "example": "property_object_id"
          },
          "book_details": {
            "type": "string",
            "example": "book_details_object_id"
          }
        }
      },
      "UpdateBookedDatesRequest": {
        "type": "object",
        "properties": {
          "checkin_date": {
            "type": "string",
            "example": "checkin_date"
          },
          "checkout_date": {
            "type": "string",
            "example": "checkout_date"
          }
        }
      },
      "BookDetailsRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "first_name"
          },
          "last_name": {
            "type": "string",
            "example": "last_name"
          },
          "email": {
            "type": "string",
            "example": "email"
          },
          "guests": {
            "type": "number",
            "example": 3
          },
          "phone_number": {
            "type": "string",
            "example": "phone_number"
          },
          "message": {
            "type": "string",
            "example": "message"
          },
          "promo_code": {
            "type": "string",
            "example": "promo_code"
          },
          "newsletter_agree": {
            "type": "boolean",
            "example": true
          },
          "property": {
            "type": "string",
            "example": "property_object_id"
          },
          "booked_dates": {
            "type": "string",
            "example": "booked_dates_object_ids"
          }
        }
      },
      "BlogCategoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "blog_category_name"
          }
        }
      },
      "BlogsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "blog_title"
          },
          "subtitle": {
            "type": "string",
            "example": "blog_subtitle"
          },
          "body": {
            "type": "string",
            "example": "blog_body_in_html"
          },
          "tags": {
            "type": "array",
            "example": [
              "blog_tags"
            ],
            "items": {
              "type": "string"
            }
          },
          "added_on": {
            "type": "string",
            "example": "blog_added_on"
          },
          "category": {
            "type": "string",
            "example": "blog_category_object_id"
          },
          "thumbnail": {
            "type": "string",
            "example": "blog_thumbnail_image_url"
          }
        }
      },
      "UploadMultipleFiles": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "example": [
              "file1",
              "file2"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UploadSingleFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "example": "file"
          }
        }
      },
      "PropertyUtilityRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "utility_name"
          },
          "provider_name": {
            "type": "string",
            "example": "provider_name"
          },
          "account_no": {
            "type": "string",
            "example": "account_no"
          },
          "paid_by": {
            "type": "string",
            "example": "Owner/Company"
          },
          "web_login": {
            "type": "string",
            "example": "web_login"
          },
          "web_pass": {
            "type": "string",
            "example": "web_pass"
          },
          "already_have_account": {
            "type": "boolean",
            "example": true
          },
          "link": {
            "type": "string",
            "example": "link"
          },
          "uploads": {
            "type": "string",
            "example": "uploads"
          },
          "type": {
            "type": "string",
            "example": "other"
          },
          "property": {
            "type": "string",
            "example": "property_object_id"
          },
          "user_id": {
            "type": "string",
            "example": "user_object_id"
          }
        }
      },
      "UtilityManagementRequest": {
        "type": "object",
        "properties": {
          "internet": {
            "type": "object",
            "properties": {
              "web_login": {
                "type": "string",
                "example": "web_login"
              },
              "web_pass": {
                "type": "string",
                "example": "web_pass"
              },
              "service_provider": {
                "type": "string",
                "example": "service_provider"
              },
              "service_name": {
                "type": "string",
                "example": "Internet"
              },
              "account_no": {
                "type": "string",
                "example": "account_no"
              },
              "paid_by": {
                "type": "string",
                "example": "Owner/Company"
              },
              "already_have_account": {
                "type": "boolean",
                "example": true
              },
              "type": {
                "type": "string",
                "example": "internet"
              }
            }
          },
          "electricity_water": {
            "type": "object",
            "properties": {
              "web_login": {
                "type": "string",
                "example": "web_login"
              },
              "web_pass": {
                "type": "string",
                "example": "web_pass"
              },
              "service_provider": {
                "type": "string",
                "example": "service_provider"
              },
              "service_name": {
                "type": "string",
                "example": "Electricity & Water"
              },
              "account_no": {
                "type": "string",
                "example": "account_no"
              },
              "paid_by": {
                "type": "string",
                "example": "Owner/Company"
              },
              "already_have_account": {
                "type": "boolean",
                "example": true
              },
              "type": {
                "type": "string",
                "example": "electricity_water"
              }
            }
          },
          "gas": {
            "type": "object",
            "properties": {
              "web_login": {
                "type": "string",
                "example": "web_login"
              },
              "web_pass": {
                "type": "string",
                "example": "web_pass"
              },
              "service_provider": {
                "type": "string",
                "example": "service_provider"
              },
              "service_name": {
                "type": "string",
                "example": "Gas"
              },
              "account_no": {
                "type": "string",
                "example": "account_no"
              },
              "paid_by": {
                "type": "string",
                "example": "Owner/Company"
              },
              "already_have_account": {
                "type": "boolean",
                "example": true
              },
              "type": {
                "type": "string",
                "example": "gas"
              }
            }
          },
          "chiller": {
            "type": "object",
            "properties": {
              "web_login": {
                "type": "string",
                "example": "web_login"
              },
              "web_pass": {
                "type": "string",
                "example": "web_pass"
              },
              "service_provider": {
                "type": "string",
                "example": "service_provider"
              },
              "service_name": {
                "type": "string",
                "example": "Chiller"
              },
              "account_no": {
                "type": "string",
                "example": "account_no"
              },
              "paid_by": {
                "type": "string",
                "example": "Owner/Company"
              },
              "already_have_account": {
                "type": "boolean",
                "example": true
              },
              "type": {
                "type": "string",
                "example": "chiller"
              }
            }
          },
          "other": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "web_login": {
                  "type": "string",
                  "example": "web_login"
                },
                "web_pass": {
                  "type": "string",
                  "example": "web_pass"
                },
                "service_provider": {
                  "type": "string",
                  "example": "service_provider"
                },
                "service_name": {
                  "type": "string",
                  "example": "Other"
                },
                "account_no": {
                  "type": "string",
                  "example": "account_no"
                },
                "paid_by": {
                  "type": "string",
                  "example": "Owner/Company"
                },
                "already_have_account": {
                  "type": "boolean",
                  "example": true
                },
                "link": {
                  "type": "string",
                  "example": "link"
                },
                "uploads": {
                  "type": "array",
                  "example": [
                    "uploads"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "type": {
                  "type": "string",
                  "example": "other"
                }
              }
            }
          },
          "property": {
            "type": "string",
            "example": "property_object_id"
          },
          "user": {
            "type": "string",
            "example": "user_object_id"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}